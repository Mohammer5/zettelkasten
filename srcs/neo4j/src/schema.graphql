type TagCategory {
  id: ID! @id
  label: ID!
  backgroundColor: ID! #hex
  fontColor: String! #hex
  tags: [Tag!] @relationship(type: "HAS_CATEGORY", direction: IN)
}

type Tag {
  id: ID! @id
  zettel: [Zettel!] @relationship(type: "HAS", direction: IN)
  category: TagCategory! @relationship(type: "HAS_CATEGORY", direction: OUT)
  label: ID!
}

# Zettels can be shared between zettels
# This way they can be re-used if useful
type Source {
  id: ID! @id
  label: ID!
  link: ID # optional
  file: ID # optional local file path / file address
  notes: String # optional
  zettel: [Zettel!] @relationship(type: "HAS", direction: IN)
}

# union KastenContent = Zettel | Kasten

# Zettels can be shared between kastens
# This way they can be re-used if useful
type Zettel {
  id: ID! @id
  title: ID!
  content: String!
  tags: [Tag!]!
    @relationship(type: "HAS", direction: OUT)
  sources: [Source!]
    @relationship(type: "HAS", direction: OUT)
  kastens: [Kasten!] @relationship(type: "IN_KASTEN", direction: OUT, properties: "InKastenRelationship")
}

interface InKastenRelationship {
  position: Int!
}

# A Kasten is a topic, e. g. a scientific study, homework, a presentation
type Kasten {
  id: ID! @id
  label: ID!
  contents: [Zettel!]
    @relationship(
      type: "IN_KASTEN",
      direction: IN,
      properties: "InKastenRelationship"
    )
}

input InputDeleteTrailingKastenPosition {
  from: Int!
  kasten: ID!
}

input InputRemoveFromKasten {
  position: Int!
  kastenId: ID!
}

# [ Zettel1, Zettel2, Zettel3, Zettel4 ]

type Mutation {
  removeFromKasten(input: InputRemoveFromKasten): Zettel
    @cypher(statement: """
      // Delete position
      MATCH (zettel)-[toDeleteRel:IN_KASTEN { position: $input.position }]->(:Kasten { id: $input.kastenId })
      DELETE toDeleteRel

      // Adjust index of all remaining following positions
      WITH zettel,toDeleteRel
      MATCH following=()-[toMoveRel:IN_KASTEN]->(:Kasten { id: $input.kastenId })
      WHERE toMoveRel.position > $input.position
      FOREACH (r IN relationships(following) | SET r.position = r.position - 1)

      // Return amount of adjusted nodes
      RETURN zettel
    """)

  deleteTrailingKastenPosition(input: InputDeleteTrailingKastenPosition!): Int
    @cypher(statement: """
      MATCH (n:KastenPosition)<-[:FOR_KASTEN]-(k:Kasten { id: $input.kasten })
      WHERE n.position >= $input.from
      DETACH DELETE n
      RETURN count(n)
    """)
}
